{"version":3,"sources":["redux/file-system/actions/index.ts","theme/colors.ts","redux/file-system/action-creators/index.ts","redux/actions.ts","file-system/index.ts","layouts/main/Header.tsx","components/FileDisplay/TreeItem.tsx","components/FileSystemDisplay.tsx","layouts/main/Sider.tsx","components/Editor.tsx","layouts/main/EditorBlock.tsx","layouts/index.tsx","pages/index.tsx","redux/file-system/reducers/index.ts","redux/reducers.ts","redux/file-system/saga/index.ts","redux/saga.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","colors","bg1","bg1Hover","bg2","bg3","gray","white","black","blue","red","green","importFolder","searchTable","type","IMPORT_FOLDER","payload","getDirHandler","GET_DIRECTORY_HANDLER","open","fileHandler","OPEN","newEditor","fileArray","NEW_EDITOR","changeEditorContent","content","CHANGE_EDITOR_CONTENT","closeEditor","index","CLOSE_EDITOR","openTreeItem","id","OPEN_TREE_ITEM","newFile","NEW_FILE","setCurrentIndex","SET_CURRENT_INDEX","saveAs","destinationHandler","SAVE_AS","save","SAVE","saveAsStateUpdate","desId","desName","desType","ancestorId","SAVE_AS_STATE_UPDATE","fileSystemActions","FileSystemActionType","FileSystem","first","second","handle","kind","compA","name","toLocaleLowerCase","compB","localeCompare","rootHandler","ancestor","a","dirHandle","entries","uuid","uuidv4","node","children","call","push","sort","this","rootNode","resolve","path","treeNode","newId","newNode","fileHandlers","ids","console","log","fileInfoArray","length","getFile","file","text","fileNode","i","oldId","newfileHandles","fileHandle","contents","createWritable","writable","write","close","window","showSaveFilePicker","fileSystemTree","returnDirectoryIfNotFound","folderNode","fileName","pop","folderName","find","handlers","fileTable","Object","keys","editorfileHandlerArray","values","filter","clearedHandlers","handler","repeated","editorFileHandler","isSameEntry","getRootDirectoryHandler","showDirectoryPicker","getFileHandler","showOpenFilePicker","showRootHandler","getRootHandler","FileSystemInstance","Container","styled","header","props","theme","MenuButton","DefaultMenuButton","MenuList","DefaultMenuList","connector","connect","state","fileSystem","editorState","currentIndex","dispatch","useDispatch","currentId","onOpenDirectory","actions","onOpenFile","onCreate","createNewFilePlaceHolder","onSave","onSaveAs","getNewFileHandle","newFileHandler","style","width","onSelect","TreeItem","disPatch","nodeId","label","onDoubleClick","event","stopPropagation","getSearchTable","undefined","fileSystemNode","FileSystemDisplay","treeView","TreeView","defaultCollapseIcon","defaultExpandIcon","rootId","renderTree","table","Array","isArray","map","childId","fileSystemState","div","Header","Wrapper","Editor","onChange","value","language","height","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","StyledTabs","other","Tabs","handleTabClick","newValue","variant","scrollButtons","viewBox","onClick","e","Tab","createTab","findIndex","GlobalStyles","createGlobalStyle","Main","main","Layout","ContentPage","initialState","createFileSystemState","array","key","fromEntries","reducer","produce","action","forEach","fileState","removeFileFromFileTable","splice","reducers","combineReducers","fileSystemReducer","watchDirHandler","openFile","watchFileHandler","openFileTreeView","watchFileHandlerForTreeItem","watchSave","watchSaveAs","rootSaga","bind","put","takeEvery","getFileInfo","select","srcIndex","srcId","srcHandler","idToFileHandler","desHandler","writeToFile","addFileInfo","findIdFromSearchTable","updateFileTable","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b13a5e8d.chunk.js","sourcesContent":["import { searchTable } from \"file-system\";\r\nimport { fileState } from \"../states/states\";\r\n\r\nexport enum ActionType {\r\n    GET_DIRECTORY_HANDLER = 'get_directory_handler',\r\n    OPEN = 'open',\r\n    OPEN_TREE_ITEM = 'open_tree_item',\r\n    NEW_EDITOR = \"new_editor\",\r\n    CLOSE_EDITOR = \"close_editor\",\r\n    IMPORT_FOLDER = 'import_folder',\r\n    CHANGE_EDITOR_CONTENT = \"change_editor_content\",\r\n    SAVE = 'save',\r\n    SAVE_AS = 'save_as',\r\n    SAVE_AS_STATE_UPDATE = 'update_current_fs_state',\r\n    COPY = 'copy',\r\n    PASTY = 'paste',\r\n    MOVE = 'move',\r\n    DELETE = 'delete',\r\n    NEW_FILE = 'new_file',\r\n    SET_CURRENT_INDEX = 'set_current_index',\r\n\r\n    // not used\r\n    // REFRESH = 'refresh',\r\n}\r\n\r\nexport type fileArrayType = Array<fileState>\r\n\r\n//File System ralated actions \r\nexport interface GetDirectoryHandler {\r\n    type: ActionType.GET_DIRECTORY_HANDLER;\r\n}\r\n\r\nexport interface ImportFolderAction {\r\n    type: ActionType.IMPORT_FOLDER;\r\n    payload: {\r\n        searchTable: searchTable;\r\n    };\r\n}\r\n\r\nexport interface Save {\r\n    type: ActionType.SAVE;\r\n    payload: {\r\n    }\r\n}\r\n\r\nexport interface SetCurrentIndex {\r\n    type: ActionType.SET_CURRENT_INDEX;\r\n    payload: {\r\n        index: number;\r\n    }\r\n}\r\n\r\nexport interface SaveAs {\r\n    type: ActionType.SAVE_AS;\r\n    payload: {\r\n        destinationHandler: FileSystemFileHandle\r\n    }\r\n}\r\n\r\nexport interface SaveAsStateUpdate {\r\n    type: ActionType.SAVE_AS_STATE_UPDATE;\r\n    payload: {\r\n        ancestorId: string,\r\n        desId: string,\r\n        desName: string,\r\n        desType: string\r\n    }\r\n}\r\n\r\nexport interface Open {\r\n    type: ActionType.OPEN;\r\n    payload: {\r\n        fileHandler: Array<FileSystemFileHandle>;\r\n    }\r\n}\r\n\r\nexport interface OpenTreeItem {\r\n    type: ActionType.OPEN_TREE_ITEM;\r\n    payload: {\r\n        fileHandler: Array<FileSystemFileHandle>;\r\n        id: Array<string>;\r\n    }\r\n}\r\n\r\n\r\nexport interface NewEditor {\r\n    type: ActionType.NEW_EDITOR;\r\n    payload: {\r\n        fileArray: fileArrayType\r\n    }\r\n}\r\n\r\nexport interface ChangeEditorContent{\r\n    type: ActionType.CHANGE_EDITOR_CONTENT;\r\n    payload: {\r\n        content: string\r\n    }\r\n}\r\n\r\nexport interface CloseEditor {\r\n    type: ActionType.CLOSE_EDITOR;\r\n    payload: {\r\n        index: number\r\n    }\r\n}\r\n\r\nexport interface NewFile {\r\n    type: ActionType.NEW_FILE;\r\n    payload: {\r\n        id: string;\r\n    }\r\n}\r\n\r\nexport interface CopyAction {\r\n    type: ActionType.COPY;\r\n    payload: {\r\n        id: number;\r\n    }\r\n}\r\n\r\nexport interface PasteAction {\r\n    type: ActionType.PASTY;\r\n    payload: {\r\n        id: number;\r\n        to: number;\r\n    }\r\n}\r\n\r\nexport interface MoveAction {\r\n    type: ActionType.MOVE;\r\n    payload: {\r\n        id: number;\r\n        to: number;\r\n    }\r\n}\r\n\r\nexport interface DeleteAction {\r\n    type: ActionType.DELETE;\r\n    payload: {\r\n        id: number;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type Action =\r\n    | ImportFolderAction\r\n    | GetDirectoryHandler\r\n    | Open\r\n    | NewEditor\r\n    | CloseEditor\r\n    | Save\r\n    | SaveAs\r\n    | SetCurrentIndex\r\n    | CopyAction\r\n    | PasteAction\r\n    | MoveAction\r\n    | DeleteAction\r\n    | OpenTreeItem\r\n    | NewFile\r\n    | SaveAsStateUpdate\r\n    | ChangeEditorContent\r\n    ;\r\n","export const colors = {\n  bg1: '#040404',\n  bg1Hover: '#111111',\n  bg2: '#151515',\n  bg3: '#242424',\n  gray: '#757575',\n  white: '#fff',\n  black: '#000',\n  blue: '#6CC7F6',\n  red: '#E1270E',\n  green: '#5BC266',\n};\n","import { searchTable as searchTableType } from \"file-system\";\r\n\r\nimport {\r\n    GetDirectoryHandler,\r\n    ImportFolderAction,\r\n    Open,\r\n    SetCurrentIndex,\r\n    NewEditor,\r\n    CloseEditor,\r\n    fileArrayType,\r\n    OpenTreeItem,\r\n    NewFile,\r\n    Save,\r\n    SaveAs,\r\n    ActionType,\r\n    SaveAsStateUpdate,\r\n    ChangeEditorContent,\r\n} from '../actions';\r\n\r\ninterface importFolderInputType {\r\n    searchTable: searchTableType,\r\n}\r\n\r\n\r\nexport const importFolder = ({ searchTable }: importFolderInputType): ImportFolderAction => {\r\n    return {\r\n        type: ActionType.IMPORT_FOLDER,\r\n        payload: {\r\n            searchTable\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDirHandler = (): GetDirectoryHandler => {\r\n    return {\r\n        type: ActionType.GET_DIRECTORY_HANDLER,\r\n    }\r\n}\r\n\r\nexport const open = (fileHandler: Array<FileSystemFileHandle>): Open => {\r\n    return {\r\n        type: ActionType.OPEN,\r\n        payload: {\r\n            fileHandler\r\n        }\r\n    }\r\n}\r\n\r\nexport const newEditor = (fileArray: fileArrayType): NewEditor => {\r\n    return {\r\n        type: ActionType.NEW_EDITOR,\r\n        payload: {\r\n            fileArray\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeEditorContent = (content: string): ChangeEditorContent => {\r\n    return {\r\n        type: ActionType.CHANGE_EDITOR_CONTENT,\r\n        payload: {\r\n            content\r\n        }\r\n    }\r\n}\r\n\r\nexport const closeEditor = (index: number): CloseEditor => {\r\n    return {\r\n        type: ActionType.CLOSE_EDITOR,\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const openTreeItem = (fileHandler: Array<FileSystemFileHandle>, id: Array<string>): OpenTreeItem => {\r\n    return {\r\n        type: ActionType.OPEN_TREE_ITEM,\r\n        payload: {\r\n            fileHandler,\r\n            id\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const newFile = (id: string): NewFile => {\r\n    return {\r\n        type: ActionType.NEW_FILE,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCurrentIndex = (index: number): SetCurrentIndex => {\r\n    return {\r\n        type: ActionType.SET_CURRENT_INDEX,\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveAs = (destinationHandler: FileSystemFileHandle): SaveAs => {\r\n    return {\r\n        type: ActionType.SAVE_AS,\r\n        payload: {\r\n            destinationHandler\r\n        }\r\n    }\r\n}\r\n\r\nexport const save = (): Save => {\r\n    return {\r\n        type: ActionType.SAVE,\r\n        payload: {\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const saveAsStateUpdate = ( desId: string, desName: string, desType: string, ancestorId: string): SaveAsStateUpdate => {\r\n    return {\r\n        type: ActionType.SAVE_AS_STATE_UPDATE,\r\n        payload: {\r\n            ancestorId,\r\n            desId,\r\n            desName,\r\n            desType\r\n        }\r\n    }\r\n}","import * as fileSystemActions from './file-system/action-creators';\r\nimport { ActionType as FileSystemActionType } from './file-system/actions';\r\n\r\nexport default fileSystemActions;\r\nexport * from './file-system/action-creators';\r\nexport const ActionType = FileSystemActionType;","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface fileSystemFileNode {\r\n    id: string,\r\n    handle: FileSystemHandle,\r\n    ancestor?: fileSystemNode,\r\n}\r\n\r\nexport interface fileSystemDirectoryNode extends fileSystemFileNode {\r\n    children: fileSystemTree,\r\n}\r\n\r\nexport type fileSystemNode = fileSystemDirectoryNode | fileSystemFileNode;\r\nexport type fileSystemTree = fileSystemNode[];\r\nexport interface searchTable {\r\n    [id: string]: fileSystemNode | string,\r\n    rootId?: string,\r\n}\r\n\r\nexport interface fileTable {\r\n    [id: string]: FileSystemFileHandle | null,\r\n}\r\n\r\nclass FileSystem {\r\n    //combine fileSystemTree with searchTable in the futuer\r\n    #fileSystemTree: fileSystemTree = [];\r\n    #rootHandler: FileSystemDirectoryHandle;\r\n    #fileTable: fileTable = {};\r\n    #searchTable: searchTable = {};\r\n    static #instance: FileSystem;\r\n\r\n    constructor() {\r\n        //singleton pattern\r\n        if (FileSystem.#instance) {\r\n            return FileSystem.#instance;\r\n        }\r\n        FileSystem.#instance = this;\r\n    }\r\n\r\n    //Private Methods\r\n    #compareFileSystemTree: (first: fileSystemNode, second: fileSystemNode) => number = (first, second) => {\r\n        if (first.handle.kind !== second.handle.kind) {\r\n            return first.handle.kind === \"directory\" ? -1 : 1\r\n        } else {\r\n            let compA = first.handle.name.toLocaleLowerCase();\r\n            let compB = second.handle.name.toLocaleLowerCase();\r\n            return compA.localeCompare(compB) > 0 ? -1 : 1\r\n        }\r\n    }\r\n\r\n    #setRootHandler = (rootHandler: FileSystemDirectoryHandle) => { this.#rootHandler = rootHandler }\r\n\r\n    #recursiveScanFolder = async (\r\n        ancestor: fileSystemDirectoryNode\r\n    ) => {\r\n        let node: fileSystemNode;\r\n        let uuid: string;\r\n\r\n        const dirHandle = ancestor.handle as FileSystemDirectoryHandle;\r\n        try {\r\n            const entries = dirHandle.entries();\r\n            for await (let [name, handle] of entries) {\r\n                uuid = uuidv4();\r\n\r\n                if (handle.kind === \"directory\") {\r\n                    node = {\r\n                        handle: handle,\r\n                        id: uuid,\r\n                        ancestor: ancestor,\r\n                        children: []\r\n                    }\r\n                    await this.#recursiveScanFolder.call(this, node);\r\n                } else {\r\n                    node = {\r\n                        handle: handle,\r\n                        id: uuid,\r\n                        ancestor: ancestor,\r\n                    }\r\n                }\r\n                ancestor['children'].push(node);\r\n                ancestor['children'].sort(this.#compareFileSystemTree);\r\n                this.#searchTable[uuid] = node;\r\n            }\r\n        } catch {\r\n            //console.log(dirHandle)\r\n        }\r\n        return ancestor;\r\n    };\r\n\r\n    #findNodeFromPath(path: Array<string>, fileSystemTree: fileSystemTree, returnDirectoryIfNotFound: boolean = false): fileSystemNode {\r\n        if (!path) { return null }\r\n        let fileName = path.pop();\r\n        let treeNode = fileSystemTree[0] as fileSystemDirectoryNode;\r\n        let folderNode: fileSystemNode | undefined;\r\n        for (let folderName of path) {\r\n            folderNode = treeNode.children.find(node => node.handle.kind === \"directory\" && node.handle.name === folderName)\r\n            if (folderNode) {\r\n                treeNode = folderNode as fileSystemDirectoryNode;\r\n            }\r\n            else { return null; }\r\n        }\r\n\r\n        let fileNode = treeNode.children.find(node => node.handle.kind === \"file\" && node.handle.name === fileName);\r\n        if (fileNode) { return fileNode }\r\n        else {\r\n            if (returnDirectoryIfNotFound === false) {\r\n                return null\r\n            } else {\r\n                return treeNode\r\n            }\r\n        }\r\n    }\r\n\r\n    async #removeRepeatedFilesOpened(handlers: Array<FileSystemFileHandle>, fileTable: fileTable) {\r\n        if (Object.keys(fileTable).length === 0) return handlers;\r\n        let editorfileHandlerArray: Array<FileSystemFileHandle> = Object.values(fileTable).filter(file => file);\r\n        let clearedHandlers: Array<FileSystemFileHandle> = [];\r\n        for (let handler of handlers) {\r\n            let repeated: boolean = false;\r\n            for (let editorFileHandler of editorfileHandlerArray) {\r\n                let isSameEntry: boolean = await editorFileHandler.isSameEntry(handler)\r\n                if (isSameEntry) {\r\n                    repeated = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!repeated) clearedHandlers.push(handler);\r\n        }\r\n        return clearedHandlers;\r\n    }\r\n\r\n    //Public Methods\r\n    getfileSystemTree() {\r\n        return this.#fileSystemTree;\r\n    }\r\n    getSearchTable() {\r\n        return this.#searchTable;\r\n    }\r\n    getfileTable() {\r\n        return this.#fileTable;\r\n    }\r\n    getRootHandler() {\r\n        return this.#rootHandler;\r\n    }\r\n\r\n    findIdFromSearchTable(id: string) {\r\n        return this.#searchTable[id]\r\n    }\r\n\r\n    idToFileHandler(id: string) {\r\n        if (this.#fileTable[id]) return this.#fileTable[id];\r\n        if (this.#searchTable[id]) {\r\n            const fileNode = this.#searchTable[id] as fileSystemNode;\r\n            return fileNode.handle;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    createNewFilePlaceHolder() {\r\n        const id = uuidv4();\r\n        this.#fileTable[id] = null;\r\n        return id;\r\n    }\r\n\r\n    async importFolder() {\r\n        this.#fileSystemTree = [];\r\n        this.#searchTable = {};\r\n        const rootNode: fileSystemNode = {\r\n            handle: this.#rootHandler,\r\n            id: uuidv4(),\r\n            children: []\r\n        }\r\n        this.#searchTable[rootNode.id] = rootNode;\r\n        this.#searchTable['rootId'] = rootNode.id;\r\n        await this.#recursiveScanFolder.call(this, rootNode);\r\n        this.#fileSystemTree.push(rootNode);\r\n    }\r\n\r\n    async addFileInfo(fileHandler: FileSystemFileHandle) {\r\n        let path = await this.#rootHandler?.resolve(fileHandler);\r\n        if (!path) {\r\n            return null;\r\n        } else {\r\n            const treeNode = this.#findNodeFromPath(path, this.#fileSystemTree, true);\r\n            if (\"children\" in treeNode) {\r\n                const newId = uuidv4();\r\n                const newNode: fileSystemFileNode = {\r\n                    id: newId,\r\n                    handle: fileHandler,\r\n                    ancestor: treeNode\r\n                }\r\n                treeNode.children[newId] = newNode;\r\n                this.#searchTable[newId] = newNode;\r\n                return newId;\r\n            } else {\r\n                return treeNode.id;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getFileInfo(fileHandlers: Array<FileSystemFileHandle>, ids?: Array<string>) {\r\n        console.log(this.#fileTable, this.#searchTable)\r\n        const fileInfoArray: Array<{ name: string, id: string, content: string, type: \"standalone\" | \"infolder\" }> = [];\r\n        fileHandlers = await this.#removeRepeatedFilesOpened(fileHandlers, this.#fileTable)\r\n        console.log(fileHandlers, 1)\r\n        if (!ids || ids.length !== fileHandlers.length) {\r\n            for (let fileHandler of fileHandlers) {\r\n                let file = await fileHandler.getFile();\r\n                let content = await file.text();\r\n                let path = await this.#rootHandler?.resolve(fileHandler);\r\n                let uuid: string;\r\n                if (path) {\r\n                    let fileNode = this.#findNodeFromPath(path, this.#fileSystemTree);\r\n                    uuid = fileNode.id;\r\n                    fileInfoArray.push({\r\n                        name: fileHandler.name,\r\n                        content: content,\r\n                        type: \"infolder\",\r\n                        id: uuid\r\n                    })\r\n                } else {\r\n                    uuid = uuidv4();\r\n                    fileInfoArray.push({\r\n                        name: fileHandler.name,\r\n                        content: content,\r\n                        type: \"standalone\",\r\n                        id: uuid\r\n                    })\r\n                }\r\n                this.#fileTable[uuid] = fileHandler;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < fileHandlers.length; i++) {\r\n                let file = await fileHandlers[i].getFile();\r\n                let content = await file.text();\r\n                let uuid = ids[i]\r\n                fileInfoArray.push({\r\n                    name: fileHandlers[i].name,\r\n                    content: content,\r\n                    type: \"infolder\",\r\n                    id: uuid\r\n                })\r\n                this.#fileTable[uuid] = fileHandlers[i];\r\n            }\r\n        }\r\n        return fileInfoArray;\r\n    }\r\n\r\n    removeFileFromFileTable(id: string) {\r\n        delete this.#fileTable[id];\r\n    }\r\n\r\n    //may need some garbage entry cleaning mechanics\r\n    updateFileTable(oldId: Array<string>, newId: Array<string>, newfileHandles: Array<FileSystemFileHandle>) {\r\n        if (newId.length === 0 || newfileHandles.length !== newId.length) return false;\r\n        if (oldId.length > 0) {\r\n            for (let i = 0; i < oldId.length; i++) {\r\n                if (oldId[i] in this.#fileTable) {\r\n                    delete this.#fileTable[oldId[i]];\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < newId.length; i++) {\r\n            if (!(newId[i] in this.#fileTable)) {\r\n                this.#fileTable[newId[i]] = newfileHandles[i];\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    async writeToFile(fileHandle: FileSystemFileHandle, contents: string) {\r\n        // Create a FileSystemWritableFileStream to write to.\r\n        const writable = await fileHandle.createWritable();\r\n        // Write the contents of the file to the stream.\r\n        await writable.write(contents);\r\n        // Close the file and write the contents to disk.\r\n        await writable.close();\r\n    }\r\n\r\n    //Static\r\n    //File Access API requires its picker methods to be invoked directly \r\n    static getRootDirectoryHandler = async () => {\r\n        const rootHandler = await window.showDirectoryPicker();// to add try-catch block\r\n        FileSystem.#instance.#setRootHandler(rootHandler);\r\n        return rootHandler;\r\n    }\r\n\r\n    static getFileHandler = async () => {\r\n        return await window.showOpenFilePicker();// to add try-catch block\r\n    }\r\n\r\n    static showRootHandler = () => FileSystem.#instance.getRootHandler();\r\n\r\n    static async getNewFileHandle() {\r\n        /*         const options = {\r\n                    types: [\r\n                        {\r\n                            description: 'Text Files',\r\n                            accept: {\r\n                                'text/plain': ['.txt'],\r\n                            },\r\n                        },\r\n                    ],\r\n                }; \r\n        */\r\n        const handle = await window.showSaveFilePicker();\r\n        return handle;\r\n    };\r\n}\r\nexport default FileSystem;\r\nexport const FileSystemInstance = new FileSystem();","import React from 'react';\r\nimport { useDispatch, connect, ConnectedProps } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n  Menu,\r\n  MenuList as DefaultMenuList,\r\n  MenuButton as DefaultMenuButton,\r\n  MenuItem\r\n} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { RootState } from 'redux/reducers';\r\nimport actions from 'redux/actions';\r\nimport FileSystem, { FileSystemInstance } from 'file-system';\r\n\r\nexport const HEADER_HEIGHT = '2.5rem';\r\n\r\nconst title = \"       \";\r\n\r\nconst Container = styled.header`\r\n  position: relative;\r\n  width: 100%;\r\n  height: ${HEADER_HEIGHT};\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8125rem;\r\n  background-color: ${props => props.theme.bg3};\r\n  border-bottom: 1px solid ${props => props.theme.bg1};\r\n`;\r\n\r\nconst MenuButton = styled(DefaultMenuButton)`\r\nwidth:4rem;\r\nheight:100%;\r\nbackground-color: ${props => props.theme.bg3};\r\ncolor:${props => props.theme.white};\r\nborder:0px;\r\nfont-size: 1rem;\r\n`\r\n\r\nconst MenuList = styled(DefaultMenuList)`\r\nbackground-color: ${props => props.theme.bg3};\r\ncolor:${props => props.theme.white};\r\n`\r\nconst mapState = (state: RootState) => {\r\n  return { 'editorState': state.fileSystem.editorState, 'currentIndex': state.fileSystem.currentIndex };\r\n}\r\n\r\nconst Header = (props: PropsFromRedux) => {\r\n  const dispatch = useDispatch();\r\n  const { editorState, currentIndex } = props\r\n  const currentId = editorState[currentIndex]?.id;\r\n  const fileType = editorState.find(file => file.id === currentId)?.type;\r\n\r\n  //const reduxState = useSelector((state: RootState) => state.fileSystem);\r\n\r\n  const onOpenDirectory = async () => {\r\n    const rootHandler = await FileSystem.getRootDirectoryHandler();\r\n    if (rootHandler) {\r\n      dispatch(actions.getDirHandler());\r\n    }\r\n  }\r\n\r\n  const onOpenFile = async () => {\r\n    const fileHandler = await FileSystem.getFileHandler();\r\n    if (fileHandler) {\r\n      dispatch(actions.open(fileHandler));\r\n    }\r\n  }\r\n\r\n  const onCreate = async () => {\r\n    const id = FileSystemInstance.createNewFilePlaceHolder();\r\n    dispatch(actions.newFile(id));\r\n  }\r\n\r\n  const onSave = async () => {\r\n    dispatch(actions.save());\r\n  }\r\n\r\n  const onSaveAs = async () => {\r\n    const newFileHandler = await FileSystem.getNewFileHandle();\r\n    dispatch(actions.saveAs(newFileHandler));\r\n  }\r\n\r\n  /*   const onCheck = async () => {\r\n      const fileHandler = FileSystemInstance.idToFileHandler(currentId);\r\n      const directory = FileSystemInstance.getRootHandler();\r\n      const path = await directory.resolve(fileHandler);\r\n      console.log(path);\r\n    } */\r\n\r\n  return (\r\n    <Container>\r\n      <div style={{ width: \"0.5rem\" }}>{title}</div>\r\n      <Menu>\r\n        <MenuButton>\r\n          File\r\n        </MenuButton>\r\n\r\n        <MenuList>\r\n\r\n          <MenuItem onSelect={onCreate}>\r\n            New File\r\n          </MenuItem>\r\n\r\n          <MenuItem onSelect={onOpenFile}>\r\n            Open File...\r\n          </MenuItem>\r\n\r\n          <MenuItem onSelect={onOpenDirectory}>\r\n            Open Folder...\r\n          </MenuItem>\r\n\r\n          <MenuItem onSelect={onSave}>\r\n            Save\r\n          </MenuItem>\r\n\r\n          <MenuItem onSelect={onSaveAs}>\r\n            Save As...\r\n          </MenuItem>\r\n\r\n        </MenuList>\r\n      </Menu>\r\n    </Container >\r\n  );\r\n};\r\n\r\nconst connector = connect(mapState);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(Header);","import React from 'react';\r\nimport MuiTreeItem from '@material-ui/lab/TreeItem';\r\nimport { useDispatch } from 'react-redux';\r\nimport { FileSystemInstance as fileSystem, fileSystemNode } from 'file-system';\r\nimport { fileSystemStateNode, fileState } from 'redux/file-system/states/states';\r\nimport { openTreeItem } from 'redux/actions'\r\n\r\ninterface Props {\r\n    children: React.ReactNode,\r\n    node: fileSystemStateNode,\r\n    editorState:Array<fileState>,\r\n}\r\n\r\nconst TreeItem = ({ children, node, editorState }: Props) => {\r\n    const disPatch = useDispatch();\r\n    const handleDoubleClick: React.MouseEventHandler<HTMLLIElement> = (event) => {\r\n        event.stopPropagation();\r\n        const id = node.id;\r\n        const searchTable = fileSystem.getSearchTable();\r\n        if (searchTable[id] !== undefined ) {\r\n            const fileSystemNode = searchTable[id] as fileSystemNode;\r\n            if (fileSystemNode.handle.kind === \"file\" && editorState.find(state=>state.id===id)===undefined) {\r\n                disPatch(openTreeItem([fileSystemNode.handle as FileSystemFileHandle],[id]));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MuiTreeItem key={node.id} nodeId={node.id} label={node.name} onDoubleClick={handleDoubleClick}>\r\n            {children}\r\n        </MuiTreeItem>)\r\n};\r\n\r\nexport default TreeItem;","import TreeView from '@material-ui//lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from 'components/FileDisplay/TreeItem';\r\nimport { stateType, fileSystemStateNode, fileSystemStateTable ,fileState } from 'redux/file-system/states/states';\r\n\r\ninterface Props { fileSystem: stateType };\r\n\r\nconst FileSystemDisplay = ({ fileSystem }: Props) => {\r\n\r\n    const renderTree = (node: fileSystemStateNode, table: fileSystemStateTable, editorState:Array<fileState>) => {\r\n        if (!node) return [];\r\n        let tree: Array<JSX.Element> = [\r\n            (\r\n                <TreeItem key={node.id} node={node} editorState={editorState}>\r\n                    {\"children\" in node && Array.isArray(node.children) ? node.children.map((childId) => {\r\n                        return renderTree(table[childId], table, editorState)\r\n                    }) : []}\r\n                </TreeItem>\r\n            )]\r\n        return tree;\r\n    };\r\n\r\n    const treeView = (<TreeView\r\n        defaultCollapseIcon={<ExpandMoreIcon />}\r\n        defaultExpandIcon={<ChevronRightIcon />}\r\n    >\r\n        {fileSystem.rootId !== \"\" ? renderTree(fileSystem.fileSystemState[fileSystem.rootId], fileSystem.fileSystemState, fileSystem.editorState) : []}\r\n    </TreeView>);\r\n\r\n    return (\r\n        <>\r\n            {fileSystem.rootId !== \"\" ? treeView : []}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default FileSystemDisplay;","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { RootState } from 'redux/reducers';\r\nimport FileSystemDisplay from 'components/FileSystemDisplay';\r\nimport { stateType } from 'redux/file-system/states/states';\r\n\r\nconst Container = styled.div`\r\n  width: 20rem;\r\n  min-width: 10rem;\r\n  height: 100%;\r\n  border-right: 1px solid ${props => props.theme.bg3};\r\n`;\r\n\r\nconst Header = styled.div`\r\n  height: 2rem;\r\n  padding: 0 0.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${props => props.theme.white};\r\n  font-size: 0.8125rem;\r\n  color: ${props => props.theme.white};\r\n  background-color: ${props => props.theme.bg2};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst mapState = (state: RootState) => state;\r\nconst Sider = (props:PropsFromRedux) => {\r\n  const fileSystemState = props.fileSystem;\r\n  return (\r\n  <Container>\r\n    <Header>{\"Explorer\"}</Header>\r\n    <Wrapper>\r\n      <FileSystemDisplay fileSystem={fileSystemState as stateType}/>\r\n    </Wrapper>\r\n  </Container>)\r\n};\r\n\r\nconst connector = connect(mapState);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nexport default connector(Sider);\r\n","import React from 'react';\r\nimport MonacoEditor, { OnChange } from '@monaco-editor/react';\r\n\r\ninterface Props {\r\n  id: string,\r\n  content: string,\r\n  onChange: OnChange\r\n}\r\n\r\nconst Editor = ({ id, content, onChange }: Props) => {\r\n\r\n  return (\r\n    <MonacoEditor\r\n      //editorDidMount={onEditorDidMount}\r\n      value={content}\r\n      onChange={onChange}\r\n      theme=\"vs-dark\"\r\n      language=\"typescript\"\r\n      height=\"90%\"\r\n      path={id}\r\n      options={{\r\n        wordWrap: 'on',\r\n        minimap: { enabled: false },\r\n        showUnused: false,\r\n        folding: false,\r\n        lineNumbersMinChars: 3,\r\n        fontSize: 16,\r\n        scrollBeyondLastLine: false,\r\n        automaticLayout: true,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\r\nimport { RootState } from 'redux/reducers';\r\nimport { setCurrentIndex, closeEditor, changeEditorContent } from 'redux/actions';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport Editor from 'components/Editor';\r\nimport { OnChange } from '@monaco-editor/react';\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  min-width: 25rem;\r\n  height: 100%;\r\n  border-right: 1px solid ${props => props.theme.bg3};\r\n`;\r\n\r\nconst Header = styled.div`\r\n  height: 2rem;\r\n  padding: 0 0;\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${props => props.theme.white};\r\n  font-size: 0.8125rem;\r\n\r\n  color: ${props => props.theme.white};\r\n  background-color: ${props => props.theme.bg2};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n  \r\n`;\r\n\r\nconst StyledTabs = styled(({ children, ...other }) =>\r\n  <Tabs\r\n    {...other}\r\n  >{children}</Tabs>\r\n)`\r\n  width: 100%;\r\n  height: auto;\r\n  & .MuiTouchRipple-root {\r\n    visibility: hidden;\r\n  }\r\n`\r\n\r\nconst mapState = (state: RootState) => {\r\n  return { 'editorState': state.fileSystem.editorState, 'currentIndex': state.fileSystem.currentIndex };\r\n}\r\n\r\nconst EditorBlock = (props: PropsFromRedux) => {\r\n\r\n  const { editorState, currentIndex } = props;\r\n  const currentId = editorState[currentIndex]?.id;\r\n  type editorStateType = typeof editorState;\r\n\r\n\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    props.dispatch(setCurrentIndex(newValue));\r\n\r\n  };\r\n\r\n  const handleTabClick = (event: React.SyntheticEvent, index: number) => {\r\n    event.stopPropagation();\r\n    props.dispatch(closeEditor(index))\r\n  }\r\n\r\n  const handleEditorContentChange : OnChange = (value, e) =>{\r\n    props.dispatch(changeEditorContent(value));\r\n  }\r\n\r\n  const createTab = (editorState: editorStateType = []) => {\r\n    return editorState.map((state, index) => {\r\n      const content = <div>\r\n        <span>{state.name}</span>\r\n        <CloseOutlinedIcon fontSize={\"small\"} viewBox={\"-3 -7 26 26\"} onClick={(e: React.SyntheticEvent) => handleTabClick(e, index)} />\r\n      </div>;\r\n      return (<Tab label={content} value={index} />)\r\n\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <StyledTabs\r\n          value={currentIndex}\r\n          onChange={handleChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n        >\r\n          {createTab(editorState)};\r\n        </StyledTabs>\r\n      </Header>\r\n      <Wrapper>\r\n\r\n        <Editor id={currentId}\r\n          content={editorState[editorState.findIndex(state => state.id === currentId)]?.content}\r\n          onChange={handleEditorContentChange}\r\n        />\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\nconst connector = connect(mapState);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nexport default connector(EditorBlock);","import { FunctionComponent } from 'react';\r\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\r\nimport { colors } from 'theme/colors';\r\nimport Header from './main/Header';\r\nimport Sider from './main/Sider';\r\nimport EditorBlock from './main/EditorBlock';\r\nimport { BrowserBlock } from './main/BrowserBlock';\r\n\r\nconst GlobalStyles = createGlobalStyle<{ theme: any }>`\r\n  html,\r\n  body {\r\n    background-color: ${props => props.theme.bg1};\r\n    margin: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    color: ${props => props.theme.white};\r\n\r\n    font-family: \"Inter\", Roboto, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\r\n      Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\",\r\n      sans-serif;\r\n\r\n    text-rendering: optimizeLegibility;\r\n    color: ${props => props.theme.white};\r\n    font-size: 16px !important;\r\n\r\n    -ms-overflow-style: -ms-autohiding-scrollbar;\r\n  }\r\n\r\n  #root {\r\n    height: 100%;\r\n  }\r\n\r\n  button {\r\n    font-family: inherit;\r\n  }\r\n\r\n  a {\r\n    transition: 0.3s ease color;\r\n    color: rgba(255, 255, 255, 0.8);\r\n    font-weight: 600;\r\n\r\n    text-decoration: none;\r\n\r\n\r\n    &:hover {\r\n      color: ${props => props.theme.white};\r\n    }\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n`;\r\nconst Main = styled.main`\r\n  height: 100%;\r\n`;\r\n\r\n\r\nconst Layout: FunctionComponent = () => {\r\n  return (\r\n    <ThemeProvider theme={colors}>\r\n      <Main>\r\n        <GlobalStyles />\r\n        <Header></Header>\r\n        <Wrapper>\r\n          <Sider></Sider>\r\n          <EditorBlock></EditorBlock>\r\n          {//<BrowserBlock></BrowserBlock>\r\n          }\r\n        </Wrapper>\r\n      </Main>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default Layout;","//place holder for further single page app routing\r\nimport { FunctionComponent } from 'react';\r\n\r\nimport Layout from 'layouts';\r\n\r\nconst ContentPage: FunctionComponent = () => {\r\n    return (\r\n    <Layout/>\r\n)\r\n}\r\n\r\nexport default ContentPage;","import { produce, Draft } from 'immer';\r\nimport { fileSystemStateTable, fileSystemState, stateType, fileSystemStateNode } from \"../states/states\";\r\nimport { searchTable, fileSystemNode, FileSystemInstance } from 'file-system';\r\nimport { ActionType, Action } from \"../actions\";\r\n\r\nconst initialState: stateType = { rootId: \"\", fileSystemState: {}, editorState: [], currentIndex: -1 };\r\n\r\n/*\r\nfunction createFileSystemState: generate new state from the info from file system \r\ninput:\r\n    rootId:ID of root directory\r\n    searchTable: map of <id,fileSystemNode>\r\noutput:\r\n    new fileSystemState\r\n*/\r\nconst createFileSystemState = (searchTable: searchTable) => {\r\n    const array: Array<[string, fileSystemStateNode]> = [];\r\n    let node: fileSystemStateNode;\r\n    let value: fileSystemNode | string;\r\n    for (const key in searchTable) {\r\n        if (key !== \"rootId\") {\r\n            value = searchTable[key] as fileSystemNode;\r\n            node = {\r\n                name: value.handle.name,\r\n                id: value.id,\r\n                kind: value.handle.kind,\r\n                children: \"children\" in value ? value.children.map((node) => { return node.id }) : undefined\r\n            }\r\n            array.push([key, node]);\r\n        }\r\n    }\r\n    const fileSystemState: fileSystemStateTable = Object.fromEntries(array);\r\n    const newFileSystemState: fileSystemState = { rootId: searchTable.rootId, fileSystemState: fileSystemState };\r\n    return newFileSystemState;\r\n}\r\n\r\n\r\n\r\nconst reducer = produce((state: Draft<stateType> = initialState, action: Action) => {\r\n    switch (action.type) {\r\n        //action: import folder\r\n        case ActionType.IMPORT_FOLDER:\r\n            const { searchTable } = action.payload;\r\n            return { ...createFileSystemState(searchTable), editorState: [], currentIndex: -1 };\r\n\r\n        case ActionType.NEW_EDITOR:\r\n            const { fileArray } = action.payload;\r\n            fileArray.forEach(fileState => {\r\n                state.editorState.push({ id: fileState.id, name: fileState.name, content: fileState.content, type: fileState.type });\r\n            });\r\n            state.currentIndex = state.editorState.length - 1;\r\n            return state;\r\n\r\n        case ActionType.CHANGE_EDITOR_CONTENT:\r\n            const content = action.payload.content;\r\n            state.editorState[state.currentIndex].content = content;\r\n            return state;\r\n\r\n        case ActionType.CLOSE_EDITOR:\r\n            const index: number = action.payload.index;\r\n            const id = state.editorState[index].id;\r\n            const editorState = state.editorState;\r\n            FileSystemInstance.removeFileFromFileTable(id);\r\n            if (index !== -1) editorState.splice(index, 1);\r\n            if (index >= editorState.length) state.currentIndex -= 1;\r\n            return state;\r\n\r\n        case ActionType.NEW_FILE:\r\n            state.editorState.push(\r\n                {\r\n                    id: action.payload.id,\r\n                    name: \"New File\",\r\n                    content: \"\",\r\n                    type: \"new\"\r\n                }\r\n            )\r\n            state.currentIndex = state.editorState.length - 1;\r\n            return state;\r\n\r\n        case ActionType.SET_CURRENT_INDEX:\r\n            state.currentIndex = action.payload.index;\r\n            return state;\r\n\r\n        case ActionType.SAVE_AS_STATE_UPDATE:\r\n            const { desId, desName, desType, ancestorId } = action.payload\r\n            //update fileSystemState\r\n            if (desType === \"infolder\" && !(desId in state.fileSystemState)) {\r\n                state.fileSystemState[desId] = {\r\n                    name: desName,\r\n                    id: desId,\r\n                    kind: \"file\",\r\n                    children: undefined\r\n                }\r\n                if (ancestorId) {\r\n                    state.fileSystemState[ancestorId].children.push(desId)\r\n                    state.fileSystemState[ancestorId].children.sort()\r\n                }\r\n            }\r\n\r\n            //update editor state\r\n            state.editorState[state.currentIndex].id = desId;\r\n            state.editorState[state.currentIndex].name = desName;\r\n            state.editorState = state.editorState.filter((editorState, index) => (index === state.currentIndex) || (editorState.id !== desId));\r\n            state.currentIndex = state.editorState.findIndex(editorState => editorState.id === desId);\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n})\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport fileSystemReducer from  './file-system/reducers';\r\n\r\nexport const reducers =combineReducers({\r\n    fileSystem:fileSystemReducer\r\n})\r\n\r\nexport default reducers;\r\n\r\nexport type RootState = ReturnType<typeof reducers>;","import { call, put, takeEvery, all, select } from 'redux-saga/effects';\r\nimport actions, { ActionType } from 'redux/actions';\r\nimport { Open, OpenTreeItem, SaveAs, Save } from '../actions';\r\nimport { FileSystemInstance } from 'file-system';\r\nimport { RootState } from 'redux/reducers';\r\nimport { fileState } from '../states/states';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport function* getDirHandler() {\r\n  yield call(FileSystemInstance.importFolder.bind(FileSystemInstance));\r\n  yield put(actions.importFolder({\r\n    searchTable: FileSystemInstance.getSearchTable()\r\n  }));\r\n}\r\n\r\nfunction* watchDirHandler() {\r\n  yield takeEvery(ActionType.GET_DIRECTORY_HANDLER, getDirHandler);\r\n}\r\n\r\nexport function* openFile(action: Open) {\r\n  const fileArray = yield call(FileSystemInstance.getFileInfo.bind(FileSystemInstance), action.payload.fileHandler);\r\n  yield put(actions.newEditor(fileArray));\r\n}\r\n\r\nfunction* watchFileHandler() {\r\n  yield takeEvery(ActionType.OPEN, openFile);\r\n}\r\n\r\nexport function* openFileTreeView(action: OpenTreeItem) {\r\n  console.log(0,action.payload.fileHandler, action.payload.id)\r\n  const fileArray = yield call(FileSystemInstance.getFileInfo.bind(FileSystemInstance), action.payload.fileHandler, action.payload.id);\r\n  console.log(fileArray);\r\n  yield put(actions.newEditor(fileArray));\r\n}\r\n\r\n\r\nfunction* watchFileHandlerForTreeItem() {\r\n  yield takeEvery(ActionType.OPEN_TREE_ITEM, openFileTreeView);\r\n}\r\n\r\nfunction* watchSave() {\r\n  yield takeEvery(ActionType.SAVE, save);\r\n}\r\n\r\nexport function* save(action: Save) {\r\n  const { srcIndex, editorState } = yield select((state: RootState) => { return { srcIndex: state.fileSystem.currentIndex, editorState: state.fileSystem.editorState } });\r\n  const srcId : string = editorState[srcIndex].id;\r\n  const srcHandler = FileSystemInstance.idToFileHandler(srcId) as FileSystemFileHandle;\r\n  yield put(actions.saveAs(srcHandler));\r\n}\r\n\r\nexport function* saveAs(action: SaveAs) {\r\n  const { srcIndex, editorState } = yield select((state: RootState) => { return { srcIndex: state.fileSystem.currentIndex, editorState: state.fileSystem.editorState } });\r\n  const srcId : string = editorState[srcIndex].id;\r\n  const fileState = editorState.find((state: fileState) => state.id === srcId) as fileState;\r\n  const desHandler = action.payload.destinationHandler;\r\n\r\n  try {\r\n    yield call(FileSystemInstance.writeToFile.bind(FileSystemInstance), desHandler, fileState.content)\r\n  }\r\n  catch (error) {\r\n    console.log(\"write error: \" + error.name);\r\n    return\r\n  }\r\n  //update FileSystemInstance\r\n  let desId: string | null = yield call(FileSystemInstance.addFileInfo.bind(FileSystemInstance), desHandler);\r\n  let desType: \"infolder\" | \"standalone\" = \"infolder\";\r\n  let ancestorId = undefined;\r\n  if (desId === null) {\r\n    desId = uuidv4();\r\n    desType = \"standalone\";\r\n  }else{\r\n    ancestorId = FileSystemInstance.findIdFromSearchTable(desId)[\"ancestor\"]?.id\r\n  }\r\n  yield call(FileSystemInstance.updateFileTable.bind(FileSystemInstance), [srcId], [desId], [desHandler]);\r\n\r\n  //call state update action\r\n  \r\n  yield put(actions.saveAsStateUpdate(desId, desHandler.name, desType, ancestorId));\r\n}\r\n\r\nfunction* watchSaveAs() {\r\n  yield takeEvery(ActionType.SAVE_AS, saveAs);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchDirHandler(),\r\n    watchFileHandler(),\r\n    watchFileHandlerForTreeItem(),\r\n    watchSaveAs(),\r\n    watchSave(),\r\n  ])\r\n}","import rootSaga from './file-system/saga';\r\n\r\nexport default rootSaga;","import React, { useEffect } from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { Provider } from 'react-redux';\nimport * as esbuild from 'esbuild-wasm';\n\nimport ContentPage from 'pages';\nimport reducer from 'redux/reducers';\nimport rootSaga from 'redux/saga';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,composeEnhancers(\n  applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\n\nconst App: React.FC = () => {\n/*   useEffect(() => {\n    esbuild.initialize({\n      wasmURL: './node_modules/esbuild-wasm/esbuild.wasm',\n      worker: true\n    }).catch(()=>{console.log(\"esbuild initialize more than once!\")})\n  }, []) */\n\n  return (\n    <Provider store={store}>\n      <ContentPage />\n    </Provider>\n  )\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}